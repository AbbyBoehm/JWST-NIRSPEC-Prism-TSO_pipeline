def s1_to_pipeline(s1_config):
    """Simple function to translate an s1_config dict to a Detector1Pipeline dict.

    Args:
        s1_config (dict): the config dictionary generated by the s1 .berry files.
    
    Returns:
        dict: a Detector1Pipeline dict.
    """
    s1_pipeline = {}
    for key in ("verbose","show_plots","save_plots"):
        s1_pipeline[key] = s1_config[key]

    # First, handle the complex ones with arguments.    
    s1_pipeline["saturation"] = {"skip":(not s1_config["do_saturation"]),
                                 "n_pix_grow_sat":s1_config["sat_growth"]}
    
    s1_pipeline["refpix"] = {"skip":(not s1_config["do_refpix"]),
                             "odd_even_columns":s1_config["odd_even_col"],
                             "use_side_ref_pixels":s1_config["use_side_ref"],
                             "side_smoothing_length":s1_config["side_smooth_len"],
                             "side_gain":s1_config["side_gain"],
                             "odd_even_rows":s1_config["odd_even_row"],
                             "ovr_corr_mitigation_ftr":s1_config["ovr_corr_mit"],
                             "preserve_irs2_refpix":s1_config["pres_irs2_ref"]}

    s1_pipeline["dark_current"] = {"skip":(not s1_config["do_dark_current"]),
                                   "dark_output":s1_config["dark_output"],
                                   "average_dark_current":s1_config["avg_dark"]}
    
    s1_pipeline["charge_migration"] = {"skip":(not s1_config["do_charge_mig"]),
                                       "signal_threshold":s1_config["signal_thres"]}
    
    s1_pipeline["jump"] = {"skip":(not s1_config["do_jump"]),
                           "rejection_threshold":s1_config["rej_threshold"],
                           "three_group_rejection_threshold":s1_config["three_group_rej"],
                           "four_group_rejection_threshold":s1_config["four_group_rej"],
                           "flag_4_neighbors":s1_config["flag_4"],
                           "max_jump_to_flag_neighbors":s1_config["max_jump"],
                           "min_jump_to_flag_neighbors":s1_config["min_jump"],
                           "maximum_cores":s1_config["max_cores"]}
    
    s1_pipeline["ramp_fit"] = {"skip":(not s1_config["do_ramp_fit"]),
                               "save_opt":s1_config["save_opt"],
                               "opt_name":s1_config["opt_name"],
                               "int_name":s1_config["int_name"],
                               "suppress_one_group":s1_config["suppress_one"],
                               "maximum_cores":s1_config["max_cores"]}
    
    # These next ones are fast because they have no args except for skip.
    for key in ("gain_scale","superbias","persistence","emicorr",
                "firstframe","lastframe","reset","rscd","group_scale",
                "dq_init","linearity"):
        s1_pipeline[key] = {"skip":(not s1_config["do_{}".format(key)])}

    return s1_pipeline

def s1_to_glbs(s1_config):
    """Simple function to translate an s1_config dict to a glbs dict.

    Args:
        s1_config (dict): the config dictionary generated by the s1 .berry files.
    
    Returns:
        dict: a glbs dict.
    """
    s1_glbs = {}
    for key in ("verbose","show_plots","save_plots"):
        s1_glbs[key] = s1_config[key]

    # glbs keys are nearly identical.
    for key in ("sigma","kernel","mask","rows"):
        s1_glbs[key] = s1_config["glbs_{}".format(key)]
    
    return s1_glbs

def s1_to_NSClean(s1_config):
    """Simple function to translate an s1_config dict to an NSClean dict.

    Args:
        s1_config (dict): the config dictionary generated by the s1 .berry files.
    
    Returns:
        dict: an NSClean dict.
    """
    s1_NSClean = {}
    
    return s1_NSClean

def s2_to_pipeline(s2_config):
    """Simple function to translate an s2_config dict to a Spec2Pipeline dict.

    Args:
        s2_config (dict): the config dictionary generated by the s2 .berry files.
    
    Returns:
        dict: a Spec2Pipeline dict.
    """
    s2_pipeline = {}

    for key in ("verbose","show_plots","save_plots"):
        s2_pipeline[key] = s2_config[key]

    # First, handle the complex ones with arguments.    
    s2_pipeline["assign_wcs"] = {"skip":(not s2_config["do_assign_wcs"]),
                                 "slit_y_low":s2_config["slit_y_low"],
                                 "slit_y_high":s2_config["slit_y_high"]}
    
    s2_pipeline["badpix_selfcal"] = {"skip":(not s2_config["do_selfcal"]),
                                     "flagfrac_lower":s2_config["flagfrac_lower"],
                                     "flagfrac_upper":s2_config["flagfrac_upper"],
                                     "kernel_size":s2_config["kernel_size"],
                                     "save_flagged":s2_config["save_flagged"]} 
    
    s2_pipeline["NSClean"] = {"skip":(not s2_config["do_jwstNSClean"]),
                              "mask_spectral_regions":s2_config["mask_trace"],
                              "n_sigma":s2_config["n_sigma"],
                              "save_mask":s2_config["save_mask"],
                              "user_mask":s2_config["user_mask"]}
    
    s2_pipeline["background"] = {"skip":(not s2_config["do_background"]),
                                 "sigma":s2_config["bkg_sigma"],
                                 "maxiters":s2_config["maxiters"],
                                 "save_combined_background":s2_config["save_bkg"],
                                 "wfss_mmag_extract":s2_config["wfss_mmag_bkg"]}
    
    s2_pipeline["extract_2d"] = {"skip":(not s2_config["do_extract_2d"]),
                                 "slit_name":s2_config["slit_name"],
                                 "tsgrism_extract_height":s2_config["tsgrism_height"],
                                 "wfss_extract_half_height":s2_config["wfss_halfheight"],
                                 "wfss_mmag_extract":s2_config["wfss_mmag_ext"],
                                 "wfss_nbright":s2_config["wfss_nbright"],
                                 "extract_orders":s2_config["extract_orders"],
                                 "grism_objects":s2_config["grism_objects"]}
    
    s2_pipeline["srctype"] = {"skip":(not s2_config["do_srctype"]),
                              "source_type":s2_config["source_type_st"]}
    
    s2_pipeline["master_background"] = {"skip":(not s2_config["do_master_bckg"]),
                                        "user_background":s2_config["user_bckg"],
                                        "save_background":s2_config["save_bckg"],
                                        "force_subtract":s2_config["force_subtract"],
                                        "output_use_model":s2_config["output_model"]}
    
    s2_pipeline["flat_field"] = {"skip":(not s2_config["do_flat_field"]),
                                 "save_interpolated_flat":s2_config["save_int_flat"],
                                 "user_supplied_flat":s2_config["user_flat"],
                                 "inverse":s2_config["inverse_ff"]}
    
    s2_pipeline["pathloss"] = {"skip":(not s2_config["do_pathloss"]),
                               "inverse":s2_config["inverse_pl"],
                               "source_type":s2_config["source_type_pl"],
                               "user_slit_loc":s2_config["user_slit_loc"]}
    
    s2_pipeline["barshadow"] = {"skip":(not s2_config["do_barshadow"]),
                                "inverse":s2_config["inverse_bar"],
                                "source_type":s2_config["source_type_bar"]}
    
    # FIX: hard-coding in all those post-JuniperS2 functions to be false.
    for step in ("photom","residual_fringe","pixel_replace","resample_spec",
                 "cube_build","extract_1d"):
        s2_pipeline[step] = {"skip":True}

    # These next ones are fast because they have no args except for skip.
    for key in ("msaflag","imprint","wavecorr","straylight",
                "fringe","wfss_contam"):
        s2_pipeline[key] = {"skip":(not s2_config["do_{}".format(key)])}

    return s2_pipeline

def s2_to_curvecorrect(s2_config):
    """Simple function to translate an s2_config dict to a curvature correction dict.

    Args:
        s2_config (dict): the config dictionary generated by the s2 .berry files.
    
    Returns:
        dict: a curvature correction dict.
    """
    s2_curvecorrect = {}

    for key in ("verbose","show_plots","save_plots"):
        s2_curvecorrect[key] = s2_config[key]

    return s2_curvecorrect