def s1_to_pipeline(s1_config):
    """Simple function to translate an s1_config dict to a Detector1Pipeline dict.

    Args:
        s1_config (dict): the config dictionary generated by the s1 .berry files.
    
    Returns:
        dict: a Detector1Pipeline dict.
    """
    s1_pipeline = {}
    for key in ("verbose","show_plots","save_plots"):
        s1_pipeline[key] = s1_config[key]

    # First, handle the complex ones with arguments.    
    s1_pipeline["saturation"] = {"skip":(not s1_config["do_saturation"]),
                                 "n_pix_grow_sat":s1_config["sat_growth"]}
    
    s1_pipeline["do_refpix"] = {"skip":(not s1_config["do_refpix"]),
                                "odd_even_columns":s1_config["odd_even_col"],
                                "use_side_ref_pixels":s1_config["use_side_ref"],
                                "side_smoothing_length":s1_config["side_smooth_len"],
                                "side_gain":s1_config["side_gain"],
                                "odd_even_rows":s1_config["odd_even_row"],
                                "ovr_corr_mitigation_ftr":s1_config["ovr_corr_mit"],
                                "preserve_irs2_refpix":s1_config["pres_irs2_ref"]}

    s1_pipeline["dark_current"] = {"skip":(not s1_config["do_dark_current"]),
                                   "":s1_config["dark_output"],
                                   "":s1_config["avg_dark"]}
    
    s1_pipeline["jump"] = {"skip":(not s1_config["do_jump"]),
                           "rejection_threshold":s1_config["rej_threshold"],
                           "three_group_rejection_threshold":s1_config["three_group_rej"],
                           "four_group_rejection_threshold":s1_config["four_group_rej"],
                           "flag_4_neighbors":s1_config["flag_4"],
                           "max_jump_to_flag_neighbors":s1_config["max_jump"],
                           "min_jump_to_flag_neighbors":s1_config["min_jump"],
                           "maximum_cores":s1_config["max_cores"]}
    
    s1_pipeline["ramp_fitting"] = {"skip":(not s1_config["do_ramp_fitting"]),
                                   "save_opt":s1_config["save_opt"],
                                   "opt_name":s1_config["opt_name"],
                                   "int_name":s1_config["int_name"],
                                   "suppress_one_group":s1_config["suppress_one"],
                                   "maximum_cores":s1_config["max_cores"]}
    
    # These next ones are fast because they have no args except for skip.
    for key in ("gain_scale","superbias","persistence","emicorr",
                "firstframe","lastframe","reset","rscd","group_scale",
                "dq_init","linearity"):
        s1_pipeline[key] = {"skip":(not s1_config["do_{}".format(key)])}

    return s1_pipeline

def s1_to_glbs(s1_config):
    """Simple function to translate an s1_config dict to a glbs dict.

    Args:
        s1_config (dict): the config dictionary generated by the s1 .berry files.
    
    Returns:
        dict: a glbs dict.
    """
    s1_glbs = {}
    for key in ("verbose","show_plots","save_plots"):
        s1_glbs[key] = s1_config[key]

    # glbs keys are nearly identical.
    for key in ("sigma","kernel","mask","rows"):
        s1_glbs[key] = s1_config["glbs_{}".format(key)]
    
    return s1_glbs

def s1_to_NSClean(s1_config):
    """Simple function to translate an s1_config dict to an NSClean dict.

    Args:
        s1_config (dict): the config dictionary generated by the s1 .berry files.
    
    Returns:
        dict: an NSClean dict.
    """
    s1_NSClean = {}
    
    return s1_NSClean